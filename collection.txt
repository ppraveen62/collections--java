Collections:
------------

What is collection framework?

A collection framework is a class library to handle group of objects. Collection framework is implemented in java.util package.

Arraylist is faster, since it is non-synchronized. while vector operations give slower performance since they are synchronized(thread-safe).

If one thread works on a vector, it has acquired a lock on it, which forces any other thread wanting to word on it to have to wait until the lock is released.


We can retrieve the elements of the collection object
1.using for-each loop
2.using iterator inteface


HashSet is an unordered and unsorted collection of data set, whereas the LinkedHashSet us an ordered and sorted collection of HashSet.

HashSet is not preserving the order of elements
LinkedHashSet preserved the order of elements


When To Use
Use an ArrayList for storing and accessing data, and LinkedList to manipulate data.

How the ArrayList works
The ArrayList class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed.

How the LinkedList works
The LinkedList stores its items in "containers." The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.



Array list

A. ArrayList: ArrayList provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. The size of an ArrayList is increased automatically if the collection grows or shrinks if the objects are removed from the collection. Java ArrayList allows us to randomly access the list. ArrayList can not be used for primitive types, like int, char, etc.

Create an ArrayList object called cars that will store strings:

import java.util.ArrayList; // import the ArrayList class

ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object


example:

package collections;

import java.util.ArrayList;
import java.util.Collections;  // Import the Collections clas

public class arraylst {
  public static void main(String[] args) {
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");
    System.out.println(cars);
    
    cars.get(0);//acess an item
    cars.set(0, "Opel"); //change an item
    System.out.println(cars);
    Collections.sort(cars);  // first import collections thenSort cars 
    System.out.println(cars);
    cars.remove(0);//remove an item
    System.out.println(cars);
    cars.clear(); //remove all items
    System.out.println(cars);
    cars.size(); //size of list
    System.out.println(cars);
  }
}


----------
Loop Through an ArrayList
Loop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run:

Example
public class Main {
  public static void main(String[] args) {
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");
    for (int i = 0; i < cars.size(); i++) {
      System.out.println(cars.get(i));
    }
  }
}

You can also loop through an ArrayList with the for-each loop:

Example
public class Main {
  public static void main(String[] args) {
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");
    for (String i : cars) {
      System.out.println(i);
    }
  }
}
-----------------------------------------------------------------------------------------

linked list

LinkedList: LinkedList class is an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses.

LinkedList<String> cars = new LinkedList<String>();


package collections;
import java.util.*;
public class linkedlst {
	public static void main(String[] args) {
	    LinkedList<String> cars = new LinkedList<String>();
	    cars.add("Volvo");
	    cars.add("BMW");
	    cars.add("Ford");
	    cars.add("Mazda");
	    System.out.println(cars);
	
	  }

}

Method	n         Description	
addFirst()	Adds an item to the beginning of the list.	
addLast()	Add an item to the end of the list	
removeFirst()	Remove an item from the beginning of the list.	
removeLast()	Remove an item from the end of the list	
getFirst()	Get the item at the beginning of the list	
getLast()	Get the item at the end of the list



-------------------------------------------------------------------------
vector list
C. Vector: A vector provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. This is identical to ArrayList in terms of implementation. However, the primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized.


package collections;

//working of Vector
import java.util.*;

public class vector{
   public static void main(String[] args)
 {

     // Declaring the Vector
     Vector<Integer> v = new Vector<Integer>();
         v.add(1);
         v.add(2);
         v.add(3);
         v.add(4);

 
     System.out.println(v);

     // Remove element at index 3
     v.remove(3);
     System.out.println(v);

     // Printing elements one by one
     for (int i = 0; i < v.size(); i++)
         System.out.print(v.get(i) + " ");
 }
}


------------------------
Java HashSet


Create a HashSet object called cars that will store strings:

import java.util.HashSet; // Import the HashSet class

HashSet<String> cars = new HashSet<String>();


package collections;

import java.util.*;
public class hashset {

	public static void main(String[] args) {

		//creating hashset

        System.out.println("HashSet");
    HashSet<Integer> set=new HashSet<Integer>();
    set.add(101);
    set.add(104);
	set.add(102);
	set.add(105);
	set.add(103);
	set.add(102);
    set.add(104);
	System.out.println(set);

HashSet<String> city=new HashSet<String>();
city.add("Hyderabad");
city.add("Delhi");
city.add("Bangalore");
city.add("Amritsar");
city.add("Delhi");
System.out.println(city);
		
	}

}



LinkedHashSet

 A LinkedHashSet is very similar to a HashSet. The difference is that this uses a doubly linked list to store the data and retains the ordering of the elements. Letâ€™s understand the LinkedHashSet with an example: 



package collections;

import java.util.*;
public class linkedhashset {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("LinkedHashSet:");
		LinkedHashSet<Integer> set=new LinkedHashSet<Integer>();
		set.add(11);
		set.add(12);
		set.add(13);
		set.add(14);
		set.add(15);
		set.add(13);
		set.add(11);
		System.out.println(set);
	}

}


Treeset :


TreeSet is one of the most important implementations of the SortedSet interface in Java that uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface. 


package collections;


//Java program to Illustrate Working of  TreeSet 

import java.util.*;

//Main class
public class treeset {

 public static void  main(String[] args)
 {
     // Creating a Set interface with reference to
     // TreeSet
     Set<String> ts1 = new TreeSet<>();

     // Elements are added using add() method
     ts1.add("A");
     ts1.add("B");
     ts1.add("C");

     // Duplicates will not get insert
     ts1.add("C");

     // Elements get stored in default natural
     // Sorting Order(Ascending)
     System.out.println(ts1);
 }
}

-----------------------------------------------------
iterator

Java Iterator
An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an "iterator" because "iterating" is the technical term for looping.

To use an Iterator, you must import it from the java.util package.


package mypackage;

import java.util.*;
public class CollectionDemo2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//creating linkedlist
		System.out.println("\n");
		System.out.println("LinkedList:");
		LinkedList<String> names=new LinkedList<String>();
		names.add("Jay");
		names.add("Mendu");
		names.add("John");
		System.out.println(names);
		Iterator<String> itr=names.iterator();
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		System.out.println(names.get(1));
	}

}



// Import the ArrayList class and the Iterator class
import java.util.ArrayList;
import java.util.Iterator;

public class Main {
  public static void main(String[] args) {

    // Make a collection
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");

    // Get the iterator
    Iterator<String> it = cars.iterator();

    // Print the first item
    System.out.println(it.next());
  }
}

Looping Through a Collection
To loop through a collection, use the hasNext() and next() methods of the Iterator:

Example
while(it.hasNext()) {
  System.out.println(it.next());
}


Example
Use an iterator to remove numbers less than 10 from a collection:

import java.util.ArrayList;
import java.util.Iterator;

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> numbers = new ArrayList<Integer>();
    numbers.add(12);
    numbers.add(8);
    numbers.add(2);
    numbers.add(23);
    Iterator<Integer> it = numbers.iterator();
    while(it.hasNext()) {
      Integer i = it.next();
      if(i < 10) {
        it.remove();
      }
    }
    System.out.println(numbers);
  }
}
